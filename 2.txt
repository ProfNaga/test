#BELLMANFORD

import java.util.*;

public class Main {
    class Edge {
        int src, dest, weight;

        Edge() {
            src = dest = weight = 0;
        }
    };

    int V, E;
    Edge edge[];

    Main(int v, int e) {
        V = v;
        E = e;
        edge = new Edge[e];
        for (int i = 0; i < e; ++i)
            edge[i] = new Edge();
    }

    void BellmanFord(Main graph, int src) {
        int V = graph.V, E = graph.E;
        int dist[] = new int[V];
        for (int i = 0; i < V; ++i)
            dist[i] = Integer.MAX_VALUE;
        dist[src] = 0;
        for (int i = 1; i < V; ++i) {
            for (int j = 0; j < E; ++j) {
                int u = graph.edge[j].src;
                int v = graph.edge[j].dest;
                int weight = graph.edge[j].weight;
                if (dist[u] != Integer.MAX_VALUE && dist[u] + weight < dist[v])
                    dist[v] = dist[u] + weight;
            }
        }
        for (int j = 0; j < E; ++j) {
            int u = graph.edge[j].src;
            int v = graph.edge[j].dest;
            int weight = graph.edge[j].weight;
            if (dist[u] != Integer.MAX_VALUE && dist[u] + weight < dist[v]) {
                System.out.println(-1);
                return;
            }
        }
        for (int i = 0; i < V; ++i)
            if (dist[i] != Integer.MAX_VALUE)
                System.out.print(dist[i] + " ");
            else
                System.out.print(-1 + " ");
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int V = sc.nextInt();
        int E = sc.nextInt();
        Main graph = new Main(V, E);
        for (int i = 0; i < E; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            int w = sc.nextInt();
            graph.edge[i].src = u;
            graph.edge[i].dest = v;
            graph.edge[i].weight = w;
        }
        graph.BellmanFord(graph, 0);
    }
}

# BFS TRAVERSAL

import java.io.*;  
import java.util.*;  
public class BFSTraversal  
{  
    private int node;       /* total number number of nodes in the graph */  
    private LinkedList<Integer> adj[];      /* adjacency list */  
    private Queue<Integer> que;           /* maintaining a queue */  
    BFSTraversal(int v)  
    {  
        node = v;  
        adj = new LinkedList[node];  
        for (int i=0; i<v; i++)  
        {  
            adj[i] = new LinkedList<>();  
        }  
        que = new LinkedList<Integer>();  
    }  
    void insertEdge(int v,int w)  
    {  
        adj[v].add(w);      /* adding an edge to the adjacency list (edges are bidirectional in this example) */  
    }  
    void BFS(int n)  
    {  
        boolean nodes[] = new boolean[node];       /* initialize boolean array for holding the data */  
        int a = 0;  
        nodes[n]=true;                    
        que.add(n);       /* root node is added to the top of the queue */  
        while (que.size() != 0)  
        {  
            n = que.poll();        /* remove the top element of the queue */   
            System.out.print(n+" ");    /* print the top element of the queue */  
            for (int i = 0; i < adj[n].size(); i++)  /* iterate through the linked list and push all neighbors into queue */  
            {  
                a = adj[n].get(i);  
                if (!nodes[a])      /* only insert nodes into queue if they have not been explored already */  
                {  
                    nodes[a] = true;  
                    que.add(a);  
                }  
            }    
        }  
    }  
    public static void main(String args[])  
    {  
        BFSTraversal graph = new BFSTraversal(6);  
        graph.insertEdge(0, 1);  
        graph.insertEdge(0, 3);  
        graph.insertEdge(0, 4);  
        graph.insertEdge(4, 5);  
        graph.insertEdge(3, 5);  
        graph.insertEdge(1, 2);  
        graph.insertEdge(1, 0);  
        graph.insertEdge(2, 1);  
        graph.insertEdge(4, 1);  
        graph.insertEdge(3, 1);  
        graph.insertEdge(5, 4);  
        graph.insertEdge(5, 3);  
        System.out.println("Breadth First Traversal for the graph is:");  
        graph.BFS(0);  
    }  
}  

#DIALS ALGO

import java.util.*;
public class Graph {
	static final int INF = Integer.MAX_VALUE; 
	private int V;
	private ArrayList<ArrayList<Tuple> > adj;
	public Graph(int v){
		this.V = v;
		this.adj = new ArrayList<ArrayList<Tuple> >();
		for (int i = 0; i < v; i++)
			this.adj.add(new ArrayList<Tuple>());
	}
	public void AddEdge(int u, int v, int w){
		adj.get(u).add(new Tuple(v, w));
		adj.get(v).add(new Tuple(u, w));
	}
	public void shortestPath(int src, int W){
		int[] dist = new int[V];
		Arrays.fill(dist, INF);
		ArrayList<Integer>[] B = new ArrayList[W * V + 1];
		for (int i = 0; i < W * V + 1; i++)
			B[i] = new ArrayList<Integer>();
		B[0].add(src);
         dist[src] = 0;
		int idx = 0;
		while (true) {
			while (B[idx].size() == 0 && idx < W * V)
				idx++;
			if (idx == W * V)
				break;
			int u = B[idx].get(0);
			B[idx].remove(0);
			for (Tuple i : adj.get(u)) {
				int v = i.v;
				int weight = i.w;
				int du = dist[u];
				int dv = dist[v];
				if (dv > du + weight) {
					dist[v] = du + weight;
					dv = dist[v];
					B[dv].add(0, v);
				}
			}
		}
		
            System.out.println("Vertex Distance from Source");
		for (int i = 0; i < V; ++i)
			System.out.println(i + "\t\t" + dist[i]);
	}
	static class Tuple {
		int v, w;
		Tuple(int v, int w){
			this.v = v;
			this.w = w;
		}
	}
	public static void main(String[] args){
	    Scanner s=new Scanner(System.in);
		int V = s.nextInt();
		Graph g = new Graph(V);
		int e=s.nextInt();
		int st,en,d;
		
            for(int i=0; i<e; i++){
		    st=s.nextInt();
		    en=s.nextInt();
		    d=s.nextInt();
		    g.AddEdge(st,en,d);
		}
		g.shortestPath(0,e);
	}
}
